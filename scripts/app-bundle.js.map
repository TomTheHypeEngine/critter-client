{"version":3,"sources":["app.js","environment.js","home.js","main.js","resources/index.js","services/async-http-client.js","services/fixtures.js","services/messages.js","services/tweet-service.js","viewmodels/dashboard/dashboard.js","viewmodels/global_timeline/global_timeline.js","viewmodels/login/login.js","viewmodels/logout/logout.js","viewmodels/signup/signup.js","viewmodels/tweet/tweet.js","/home/thomas/Programmieren/WebstormProjects/critter-client/src/app.html","/home/thomas/Programmieren/WebstormProjects/critter-client/src/home.html","/home/thomas/Programmieren/WebstormProjects/critter-client/src/nav-bar.html","/home/thomas/Programmieren/WebstormProjects/critter-client/src/viewmodels/dashboard/dashboard.html","/home/thomas/Programmieren/WebstormProjects/critter-client/src/viewmodels/global_timeline/global_timeline.html","/home/thomas/Programmieren/WebstormProjects/critter-client/src/viewmodels/login/login.html","/home/thomas/Programmieren/WebstormProjects/critter-client/src/viewmodels/logout/logout.html","/home/thomas/Programmieren/WebstormProjects/critter-client/src/viewmodels/signup/signup.html","/home/thomas/Programmieren/WebstormProjects/critter-client/src/viewmodels/tweet/tweet.html"],"names":["App","ts","au","ea","subscribe","msg","status","success","setRoot","then","router","navigateToRoute","configureRouter","config","map","route","name","moduleId","nav","title","redirect","mapUnknownRoutes","fallbackRoute","attached","isAuthenticated","debug","testing","Home","aurelia","configure","Promise","warnings","wForgottenReturn","use","standardConfiguration","feature","developmentLogging","plugin","start","AsyncHttpClient","httpClient","fixtures","http","withBaseUrl","baseUrl","authenticate","url","user","message","post","response","content","localStorage","tweet","JSON","stringify","configuration","withHeader","token","publish","catch","clearAuthentication","authenticated","auth","parse","get","obj","delete","Fixtures","LoginStatus","TimelineUpdate","tweets","UserUpdate","users","ChangeRouteAfterLogout","TweetService","data","ac","getUsers","res","getTweets","reverse","tweeter","returnedTweets","push","console","log","register","firstName","lastName","email","password","newUser","login","logout","Dashboard","GlobalTimeline","tweetService","Login","e","Logout","Signup","repeatPassword","showSignup","tweetText","makeTweet"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject, Aurelia} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus, ChangeRouteAfterLogout} from './services/messages';\nimport TweetService from './services/tweet-service';\n\n@inject(TweetService, Aurelia, EventAggregator)\nexport class App {\n\n  constructor(ts, au, ea) {\n    this.au = au;\n    this.ts = ts;\n    ea.subscribe(LoginStatus, msg => {\n      if (msg.status.success === true) {\n        au.setRoot('home').then(() => {\n          this.router.navigateToRoute('dashboard');\n        });\n      } else {\n        au.setRoot('app').then(() => {\n          this.router.navigateToRoute('login');\n        });\n      }\n    });\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['login', ''], name: 'login', moduleId: 'viewmodels/login/login', nav: true, title: 'Login' },\n      { route: 'logout', redirect: 'login' },\n      { route: 'signup', name: 'signup', moduleId: 'viewmodels/signup/signup', nav: true, title: 'Signup' }\n    ]);\n\n    config.mapUnknownRoutes(instruction => {\n      return 'login';\n    });\n    config.fallbackRoute('login');\n\n    this.router = router;\n  }\n\n  attached() {\n    if (this.ts.isAuthenticated()) {\n      this.au.setRoot('home').then(res => {\n        this.router.navigateToRoute('dashboard');\n      });\n    }\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import { inject, Aurelia } from 'aurelia-framework';\n\n@inject(Aurelia)\nexport class Home {\n\n  constructor(au) {\n    this.aurelia = au;\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['dashboard', ''], name: 'dashboard', moduleId: 'viewmodels/dashboard/dashboard', nav: true, title: 'Dashboard' },\n      { route: 'tweet', name: 'tweet', moduleId: 'viewmodels/tweet/tweet', nav: true, title: 'Create Tweet' },\n      { route: 'timeline', name: 'timeline', moduleId: 'viewmodels/global_timeline/global_timeline', nav: true, title: 'Timeline' },\n      { route: 'logout', name: 'logout', moduleId: 'viewmodels/logout/logout', nav: true, title: 'Logout' }\n    ]);\n\n    config.mapUnknownRoutes(instruction => {\n      return 'dashboard';\n    });\n\n    config.fallbackRoute('dashboard');\n\n    this.router = router;\n  }\n}\n","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\nimport Fixtures from './fixtures';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './messages';\n\n@inject(HttpClient, Fixtures, EventAggregator )\nexport default class AsyncHttpClient {\n\n  constructor(httpClient, fixtures, ea) {\n    this.http = httpClient;\n    this.http.configure(http => {\n      http.withBaseUrl(fixtures.baseUrl);\n    });\n    this.ea = ea;\n  }\n\n  authenticate(url, user) {\n    let status = {\n      success: false,\n      message: 'err while authenticating'\n    };\n    this.http.post(url, user).then(response => {\n      status = response.content;\n      if (status.success) {\n        localStorage.tweet = JSON.stringify(response.content);\n        this.http.configure(configuration => {\n          configuration.withHeader('Authorization', 'bearer ' + response.content.token);\n        });\n      }\n      this.ea.publish(new LoginStatus(status));\n    }).catch(error => {\n      status = {\n        success: false,\n        message: 'service not available'\n      };\n      this.ea.publish(new LoginStatus(status));\n    });\n    return status;\n  }\n\n  clearAuthentication() {\n    localStorage.tweet = null;\n    this.http.configure(configuration => {\n      configuration.withHeader('Authorization', '');\n    });\n  }\n\n  isAuthenticated() {\n    let authenticated = false;\n    //TODO Check for expiration of token hereW\n    if (localStorage.tweet && localStorage.tweet !== 'null') {\n      authenticated = true;\n      this.http.configure(http => {\n        const auth = JSON.parse(localStorage.tweet);\n        http.withHeader('Authorization', auth.token);\n      });\n    }\n    return authenticated;\n  }\n\n  get(url) {\n    return this.http.get(url);\n  }\n\n  post(url, obj) {\n    return this.http.post(url, obj);\n  }\n\n  delete(url) {\n    return this.http.delete(url);\n  }\n}\n","export default class Fixtures {\n\n  //baseUrl = 'http://localhost:5000';\n  baseUrl = 'https://critter-tweet-api.herokuapp.com'\n}\n","export class LoginStatus {\n  constructor(status) {\n    this.status = status;\n  }\n}\n\nexport class TimelineUpdate {\n  constructor(tweets) {\n    this.tweets = tweets;\n  }\n}\n\nexport class UserUpdate {\n  constructor(users) {\n    this.users = users;\n  }\n}\n\nexport class ChangeRouteAfterLogout {\n  constructor(route) {\n    this.route = route;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport Fixtures from './fixtures';\nimport {LoginStatus, UserUpdate, TimelineUpdate, ChangeRouteAfterLogout} from './messages';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport AsyncHttpClient from './async-http-client';\n\n@inject(Fixtures, EventAggregator, AsyncHttpClient)\nexport default class TweetService {\n\n  tweets = [];\n  users = [];\n\n  constructor(data, ea, ac) {\n    // this.methods = data.methods;\n    this.ea = ea;\n    this.ac = ac;\n  }\n\n  getUsers() {\n    this.ac.get('/api/users').then(res => {\n      this.users = res.content;\n      this.ea.publish(new UserUpdate(this.users));\n    });\n  }\n\n  getTweets() {\n    this.ac.get('/api/tweets').then(res => {\n      this.tweets = res.content;\n      this.tweets = this.tweets.reverse(); //Reverse tweets to show latest tweet first\n      this.ea.publish(new TimelineUpdate(this.tweets));\n    });\n  }\n\n  tweet(content) {\n    const tweet = {\n      tweeter: null,\n      content: content\n    };\n    this.ac.post('/api/tweets', tweet).then(res => {\n      const returnedTweets = res.content;\n      this.tweets.push(returnedTweets);\n      console.log('Tweet created with tweetText ' + content);\n      this.ea.publish(new TimelineUpdate(this.tweets));\n    });\n  }\n\n  isAuthenticated() {\n    return this.ac.isAuthenticated();\n  }\n\n  register(firstName, lastName, email, password) {\n    const newUser = {\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      password: password\n    };\n    this.ac.post('/api/users', newUser);\n  }\n\n  login(email, password) {\n    const user = {\n      email: email,\n      password: password\n    };\n    this.ac.authenticate('/api/users/authenticate', user);\n  }\n\n  logout() {\n    const status = {\n      success: false,\n      message: 'Logging out'\n    };\n    this.ac.clearAuthentication();\n    this.ea.publish(new LoginStatus(new LoginStatus(status)));\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TweetService, EventAggregator)\nexport class Dashboard {\n  users = [];\n\n  constructor(ts, ea) {\n    this.ts = ts;\n    this.ts.getUsers();\n    ea.subscribe(UserUpdate, msg => {\n      this.users = msg.users;\n    });\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {TimelineUpdate} from '../../services/messages';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService, EventAggregator)\nexport class GlobalTimeline {\n\n  tweets = [];\n\n  constructor(ts, ea) {\n    this.tweetService = ts;\n    this.tweetService.getTweets();\n    ea.subscribe(TimelineUpdate, msg => {\n      this.tweets = msg.tweets;\n    });\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Login {\n\n  email = 'marge@simpson.com';\n  password = 'secret';\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  login(e) {\n    console.log(`Trying to log in ${this.email}`);\n    this.tweetService.login(this.email, this.password);\n  }\n}\n","import TweetService from '../../services/tweet-service';\nimport {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {ChangeRouteAfterLogout} from '../../services/messages'\n\n@inject(TweetService, EventAggregator)\nexport class Logout {\n\n  constructor(tweetService, ea) {\n    this.tweetService = tweetService;\n    this.ea = ea;\n  }\n\n  logout() {\n    this.tweetService.logout();\n    this.ea.publish(new ChangeRouteAfterLogout('login'));\n  }\n}\n\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Signup {\n\n  firstName = 'Marge';\n  lastName = 'Simpson';\n  email = 'marge@simpson.com';\n  password = 'secret';\n  repeatPassword = 'secret';\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  register(e) {\n    this.showSignup = false;\n    if (this.password === this.repeatPassword) {\n      this.tweetService.register(this.firstName, this.lastName, this.email, this.password);\n      this.tweetService.login(this.email, this.password);\n    }\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Login {\n\n  tweetText = '';\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  makeTweet() {\n    if (this.tweetText !== '') {\n      console.log('Trying to tweet: ' + this.tweetText);\n      this.tweetService.tweet(this.tweetText);\n      this.tweetText = '';\n    } else {\n      //TODO notify error that empty tweet is not allowed\n    }\n  }\n}\n",null,null,null,null,null,null,null,null,null],"sourceRoot":"../src"}